{"ast":null,"code":"var _jsxFileName = \"/Users/nicolasurquia/Documents/GitHub/nicolas-urquia-portfolio/src/components/Particles.jsx\",\n  _s = $RefreshSig$();\nimport Particles from \"react-tsparticles\";\nimport { loadSlim } from \"tsparticles-slim\"; // loads tsparticles-slim\n//import { loadFull } from \"tsparticles\"; // loads tsparticles\nimport { useCallback, useMemo } from \"react\";\n\n// tsParticles Repository: https://github.com/matteobruni/tsparticles\n// tsParticles Website: https://particles.js.org/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ParticlesComponent = props => {\n  _s();\n  // using useMemo is not mandatory, but it's recommended since this value can be memoized if static\n  const options = useMemo(() => {\n    // using an empty options object will load the default options, which are static particles with no background and 3px radius, opacity 100%, white color\n    // all options can be found here: https://particles.js.org/docs/interfaces/Options_Interfaces_IOptions.IOptions.html\n    return {\n      background: {\n        color: \"#272727\" // this sets a background color for the canvas\n      },\n\n      fullScreen: {\n        enable: true,\n        // enabling this will make the canvas fill the entire screen, it's enabled by default\n        zIndex: -1 // this is the z-index value used when the fullScreen is enabled, it's 0 by default\n      },\n\n      interactivity: {\n        events: {\n          onClick: {\n            enable: true,\n            // enables the click event\n            mode: \"push\" // adds the particles on click\n          },\n\n          onHover: {\n            enable: true,\n            // enables the hover event\n            mode: \"repulse\" // make the particles run away from the cursor\n          }\n        },\n\n        modes: {\n          push: {\n            quantity: 10 // number of particles to add on click\n          },\n\n          repulse: {\n            distance: 100 // distance of the particles from the cursor\n          }\n        }\n      },\n\n      particles: {\n        links: {\n          enable: false,\n          // enabling this will make particles linked together\n          distance: 100 // maximum distance for linking the particles\n        },\n\n        move: {\n          enable: true,\n          // enabling this will make particles move in the canvas\n          speed: {\n            min: 1,\n            max: 2\n          } // using a range in speed value will make particles move in a random speed between min/max values, each particles have its own value, it won't change in time by default\n        },\n\n        opacity: {\n          value: {\n            min: 0.1,\n            max: 0.3\n          } // using a different opacity, to have some semitransparent effects\n        },\n\n        size: {\n          value: {\n            min: 1,\n            max: 4\n          } // let's randomize the particles size a bit\n        }\n      }\n    };\n  }, []);\n\n  // useCallback is not mandatory, but it's recommended since this callback can be memoized if static\n  const particlesInit = useCallback(engine => {\n    loadSlim(engine);\n    // loadFull(engine); // for this sample the slim version is enough, choose whatever you prefer, slim is smaller in size but doesn't have all the plugins and the mouse trail feature\n  }, []);\n\n  // setting an id can be useful for identifying the right particles component, this is useful for multiple instances or reusable components\n  return /*#__PURE__*/_jsxDEV(Particles, {\n    id: props.id,\n    init: particlesInit,\n    options: options\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 10\n  }, this);\n};\n_s(ParticlesComponent, \"S09+AMUDbBeUwQCtb/KU1O30zJc=\");\n_c = ParticlesComponent;\nexport default ParticlesComponent;\nvar _c;\n$RefreshReg$(_c, \"ParticlesComponent\");","map":{"version":3,"names":["Particles","loadSlim","useCallback","useMemo","ParticlesComponent","props","options","background","color","fullScreen","enable","zIndex","interactivity","events","onClick","mode","onHover","modes","push","quantity","repulse","distance","particles","links","move","speed","min","max","opacity","value","size","particlesInit","engine","id"],"sources":["/Users/nicolasurquia/Documents/GitHub/nicolas-urquia-portfolio/src/components/Particles.jsx"],"sourcesContent":["import Particles from \"react-tsparticles\";\nimport { loadSlim } from \"tsparticles-slim\"; // loads tsparticles-slim\n//import { loadFull } from \"tsparticles\"; // loads tsparticles\nimport { useCallback, useMemo } from \"react\";\n\n// tsParticles Repository: https://github.com/matteobruni/tsparticles\n// tsParticles Website: https://particles.js.org/\nconst ParticlesComponent = (props) => {\n  // using useMemo is not mandatory, but it's recommended since this value can be memoized if static\n  const options = useMemo(() => {\n    // using an empty options object will load the default options, which are static particles with no background and 3px radius, opacity 100%, white color\n    // all options can be found here: https://particles.js.org/docs/interfaces/Options_Interfaces_IOptions.IOptions.html\n    return {\n      background: {\n        color: \"#272727\", // this sets a background color for the canvas\n      },\n      fullScreen: {\n        enable: true, // enabling this will make the canvas fill the entire screen, it's enabled by default\n        zIndex: -1, // this is the z-index value used when the fullScreen is enabled, it's 0 by default\n      },\n      interactivity: {\n        events: {\n          onClick: {\n            enable: true, // enables the click event\n            mode: \"push\", // adds the particles on click\n          },\n          onHover: {\n            enable: true, // enables the hover event\n            mode: \"repulse\", // make the particles run away from the cursor\n          },\n        },\n        modes: {\n          push: {\n            quantity: 10, // number of particles to add on click\n          },\n          repulse: {\n            distance: 100, // distance of the particles from the cursor\n          },\n        },\n      },\n      particles: {\n        links: {\n          enable: false, // enabling this will make particles linked together\n          distance: 100, // maximum distance for linking the particles\n        },\n        move: {\n          enable: true, // enabling this will make particles move in the canvas\n          speed: { min: 1, max: 2 }, // using a range in speed value will make particles move in a random speed between min/max values, each particles have its own value, it won't change in time by default\n        },\n        opacity: {\n          value: { min: 0.1, max: 0.3 }, // using a different opacity, to have some semitransparent effects\n        },\n        size: {\n          value: { min: 1, max: 4 }, // let's randomize the particles size a bit\n        },\n      },\n    };\n  }, []);\n\n  // useCallback is not mandatory, but it's recommended since this callback can be memoized if static\n  const particlesInit = useCallback((engine) => {\n    loadSlim(engine);\n    // loadFull(engine); // for this sample the slim version is enough, choose whatever you prefer, slim is smaller in size but doesn't have all the plugins and the mouse trail feature\n  }, []);\n\n  // setting an id can be useful for identifying the right particles component, this is useful for multiple instances or reusable components\n  return <Particles id={props.id} init={particlesInit} options={options} />;\n};\n\nexport default ParticlesComponent;"],"mappings":";;AAAA,OAAOA,SAAS,MAAM,mBAAmB;AACzC,SAASC,QAAQ,QAAQ,kBAAkB,CAAC,CAAC;AAC7C;AACA,SAASC,WAAW,EAAEC,OAAO,QAAQ,OAAO;;AAE5C;AACA;AAAA;AACA,MAAMC,kBAAkB,GAAIC,KAAK,IAAK;EAAA;EACpC;EACA,MAAMC,OAAO,GAAGH,OAAO,CAAC,MAAM;IAC5B;IACA;IACA,OAAO;MACLI,UAAU,EAAE;QACVC,KAAK,EAAE,SAAS,CAAE;MACpB,CAAC;;MACDC,UAAU,EAAE;QACVC,MAAM,EAAE,IAAI;QAAE;QACdC,MAAM,EAAE,CAAC,CAAC,CAAE;MACd,CAAC;;MACDC,aAAa,EAAE;QACbC,MAAM,EAAE;UACNC,OAAO,EAAE;YACPJ,MAAM,EAAE,IAAI;YAAE;YACdK,IAAI,EAAE,MAAM,CAAE;UAChB,CAAC;;UACDC,OAAO,EAAE;YACPN,MAAM,EAAE,IAAI;YAAE;YACdK,IAAI,EAAE,SAAS,CAAE;UACnB;QACF,CAAC;;QACDE,KAAK,EAAE;UACLC,IAAI,EAAE;YACJC,QAAQ,EAAE,EAAE,CAAE;UAChB,CAAC;;UACDC,OAAO,EAAE;YACPC,QAAQ,EAAE,GAAG,CAAE;UACjB;QACF;MACF,CAAC;;MACDC,SAAS,EAAE;QACTC,KAAK,EAAE;UACLb,MAAM,EAAE,KAAK;UAAE;UACfW,QAAQ,EAAE,GAAG,CAAE;QACjB,CAAC;;QACDG,IAAI,EAAE;UACJd,MAAM,EAAE,IAAI;UAAE;UACde,KAAK,EAAE;YAAEC,GAAG,EAAE,CAAC;YAAEC,GAAG,EAAE;UAAE,CAAC,CAAE;QAC7B,CAAC;;QACDC,OAAO,EAAE;UACPC,KAAK,EAAE;YAAEH,GAAG,EAAE,GAAG;YAAEC,GAAG,EAAE;UAAI,CAAC,CAAE;QACjC,CAAC;;QACDG,IAAI,EAAE;UACJD,KAAK,EAAE;YAAEH,GAAG,EAAE,CAAC;YAAEC,GAAG,EAAE;UAAE,CAAC,CAAE;QAC7B;MACF;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMI,aAAa,GAAG7B,WAAW,CAAE8B,MAAM,IAAK;IAC5C/B,QAAQ,CAAC+B,MAAM,CAAC;IAChB;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,oBAAO,QAAC,SAAS;IAAC,EAAE,EAAE3B,KAAK,CAAC4B,EAAG;IAAC,IAAI,EAAEF,aAAc;IAAC,OAAO,EAAEzB;EAAQ;IAAA;IAAA;IAAA;EAAA,QAAG;AAC3E,CAAC;AAAC,GA5DIF,kBAAkB;AAAA,KAAlBA,kBAAkB;AA8DxB,eAAeA,kBAAkB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}